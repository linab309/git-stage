; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\usb_istr.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\usb_istr.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -I..\src\user -I..\src\user\include -I..\src\SYSTEM\delay -I..\src\SYSTEM\sys -I..\src\SYSTEM\usart -I..\src\HARDWARE\ADC -I..\src\HARDWARE\BMP -I..\src\HARDWARE\DMA -I..\src\HARDWARE\FLASH -I..\src\HARDWARE\GPS -I..\src\HARDWARE\KEY -I..\src\HARDWARE\PWM -I..\src\HARDWARE\RTC -I..\src\HARDWARE\SPI -I..\src\HARDWARE\USART2 -I..\src\HARDWARE\TIMER -I..\src\EX -I..\src\USMART -I..\..\..\Libraries\CMSIS\Include -I..\src\ff11a\src -I..\src\ff11a\src\option -I..\src\HARDWARE\LED -I..\src\HARDWARE\OLED -I..\src\ff11a\src -I..\src\ff11a\src\option -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\src\usb_istr.c]
                          THUMB

                          AREA ||i.USB_Istr||, CODE, READONLY, ALIGN=2

                  USB_Istr PROC
;;;79     *******************************************************************************/
;;;80     void USB_Istr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;81     {
;;;82     
;;;83       wIstr = _GetISTR();
000002  4e20              LDR      r6,|L1.132|
000004  6830              LDR      r0,[r6,#0]
000006  4c20              LDR      r4,|L1.136|
000008  8060              STRH     r0,[r4,#2]
;;;84     
;;;85     #if (IMR_MSK & ISTR_CTR)
;;;86       if (wIstr & ISTR_CTR & wInterrupt_Mask)
00000a  8860              LDRH     r0,[r4,#2]  ; wIstr
00000c  4d1f              LDR      r5,|L1.140|
00000e  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
000010  4008              ANDS     r0,r0,r1
000012  0400              LSLS     r0,r0,#16
000014  d501              BPL      |L1.26|
;;;87       {
;;;88         /* servicing of the endpoint correct transfer interrupt */
;;;89         /* clear of the CTR flag into the sub */
;;;90         CTR_LP();
000016  f7fffffe          BL       CTR_LP
                  |L1.26|
;;;91     #ifdef CTR_CALLBACK
;;;92         CTR_Callback();
;;;93     #endif
;;;94       }
;;;95     #endif  
;;;96       /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;97     #if (IMR_MSK & ISTR_RESET)
;;;98       if (wIstr & ISTR_RESET & wInterrupt_Mask)
00001a  8860              LDRH     r0,[r4,#2]  ; wIstr
00001c  8829              LDRH     r1,[r5,#0]  ; wInterrupt_Mask
00001e  4008              ANDS     r0,r0,r1
000020  0540              LSLS     r0,r0,#21
000022  d505              BPL      |L1.48|
;;;99       {
;;;100        _SetISTR((uint16_t)CLR_RESET);
000024  f64f30ff          MOV      r0,#0xfbff
000028  6030              STR      r0,[r6,#0]
;;;101        Device_Property.Reset();
00002a  4819              LDR      r0,|L1.144|
00002c  6840              LDR      r0,[r0,#4]  ; Device_Property
00002e  4780              BLX      r0
                  |L1.48|
;;;102    #ifdef RESET_CALLBACK
;;;103        RESET_Callback();
;;;104    #endif
;;;105      }
;;;106    #endif
;;;107      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;108    #if (IMR_MSK & ISTR_DOVR)
;;;109      if (wIstr & ISTR_DOVR & wInterrupt_Mask)
;;;110      {
;;;111        _SetISTR((uint16_t)CLR_DOVR);
;;;112    #ifdef DOVR_CALLBACK
;;;113        DOVR_Callback();
;;;114    #endif
;;;115      }
;;;116    #endif
;;;117      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;118    #if (IMR_MSK & ISTR_ERR)
;;;119      if (wIstr & ISTR_ERR & wInterrupt_Mask)
000030  8861              LDRH     r1,[r4,#2]  ; wIstr
000032  8828              LDRH     r0,[r5,#0]  ; wInterrupt_Mask
000034  4001              ANDS     r1,r1,r0
000036  0489              LSLS     r1,r1,#18
000038  d502              BPL      |L1.64|
;;;120      {
;;;121        _SetISTR((uint16_t)CLR_ERR);
00003a  f64d71ff          MOV      r1,#0xdfff
00003e  6031              STR      r1,[r6,#0]
                  |L1.64|
;;;122    #ifdef ERR_CALLBACK
;;;123        ERR_Callback();
;;;124    #endif
;;;125      }
;;;126    #endif
;;;127      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;128    #if (IMR_MSK & ISTR_WKUP)
;;;129      if (wIstr & ISTR_WKUP & wInterrupt_Mask)
000040  8861              LDRH     r1,[r4,#2]  ; wIstr
000042  4001              ANDS     r1,r1,r0
000044  04c8              LSLS     r0,r1,#19
000046  d505              BPL      |L1.84|
;;;130      {
;;;131        _SetISTR((uint16_t)CLR_WKUP);
000048  f64e70ff          MOV      r0,#0xefff
00004c  6030              STR      r0,[r6,#0]
;;;132        Resume(RESUME_EXTERNAL);
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       Resume
                  |L1.84|
;;;133    #ifdef WKUP_CALLBACK
;;;134        WKUP_Callback();
;;;135    #endif
;;;136      }
;;;137    #endif
;;;138      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;139    #if (IMR_MSK & ISTR_SUSP)
;;;140      if (wIstr & ISTR_SUSP & wInterrupt_Mask)
;;;141      {
;;;142    #ifdef SUSP_CALLBACK
;;;143              SUSP_Callback();
;;;144    #endif
;;;145    
;;;146        /* check if SUSPEND is possible */
;;;147        if (fSuspendEnabled)
;;;148        {
;;;149          Suspend();
;;;150        }
;;;151        else
;;;152        {
;;;153          /* if not possible then resume after xx ms */
;;;154          Resume(RESUME_LATER);
;;;155        }
;;;156        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
;;;157        _SetISTR((uint16_t)CLR_SUSP);
;;;158    
;;;159      }
;;;160    #endif
;;;161      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;162    #if (IMR_MSK & ISTR_SOF)
;;;163      if (wIstr & ISTR_SOF & wInterrupt_Mask)
000054  8861              LDRH     r1,[r4,#2]  ; wIstr
000056  8828              LDRH     r0,[r5,#0]  ; wInterrupt_Mask
000058  4001              ANDS     r1,r1,r0
00005a  0589              LSLS     r1,r1,#22
00005c  d505              BPL      |L1.106|
;;;164      {
;;;165        _SetISTR((uint16_t)CLR_SOF);
00005e  f64f51ff          MOV      r1,#0xfdff
000062  6031              STR      r1,[r6,#0]
;;;166        bIntPackSOF++;
000064  7821              LDRB     r1,[r4,#0]  ; bIntPackSOF
000066  1c49              ADDS     r1,r1,#1
000068  7021              STRB     r1,[r4,#0]
                  |L1.106|
;;;167    
;;;168    #ifdef SOF_CALLBACK
;;;169        SOF_Callback();
;;;170    #endif
;;;171      }
;;;172    #endif
;;;173      /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
;;;174    #if (IMR_MSK & ISTR_ESOF)
;;;175      if (wIstr & ISTR_ESOF & wInterrupt_Mask)
00006a  8861              LDRH     r1,[r4,#2]  ; wIstr
00006c  4001              ANDS     r1,r1,r0
00006e  05c8              LSLS     r0,r1,#23
000070  d507              BPL      |L1.130|
;;;176      {
;;;177        _SetISTR((uint16_t)CLR_ESOF); 
000072  f64f60ff          MOV      r0,#0xfeff
000076  6030              STR      r0,[r6,#0]
;;;178        /* resume handling timing is made with ESOFs */
;;;179        Resume(RESUME_ESOF); /* request without change of the machine state */
000078  e8bd4070          POP      {r4-r6,lr}
00007c  2007              MOVS     r0,#7
00007e  f7ffbffe          B.W      Resume
                  |L1.130|
;;;180    
;;;181    #ifdef ESOF_CALLBACK
;;;182        ESOF_Callback();
;;;183    #endif
;;;184      }
;;;185    #endif
;;;186    } /* USB_Istr */
000082  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

                  |L1.132|
                          DCD      0x40005c44
                  |L1.136|
                          DCD      ||.data||
                  |L1.140|
                          DCD      wInterrupt_Mask
                  |L1.144|
                          DCD      Device_Property

                          AREA ||.data||, DATA, ALIGN=1

                  bIntPackSOF
000000  0000              DCB      0x00,0x00
                  wIstr
000002  0000              DCB      0x00,0x00

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  pEpInt_IN
                          DCD      EP1_IN_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  pEpInt_OUT
                          DCD      NOP_Process
                          DCD      EP2_OUT_Callback
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process

;*** Start embedded assembler ***

#line 1 "..\\src\\usb_istr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usb_istr_c_e9471872____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_istr_c_e9471872____REVSH|
#line 128
|__asm___10_usb_istr_c_e9471872____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
