; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\diskio.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\diskio.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -I..\src\user -I..\src\user\include -I..\src\SYSTEM\delay -I..\src\SYSTEM\sys -I..\src\SYSTEM\usart -I..\src\HARDWARE\ADC -I..\src\HARDWARE\BMP -I..\src\HARDWARE\DMA -I..\src\HARDWARE\FLASH -I..\src\HARDWARE\GPS -I..\src\HARDWARE\KEY -I..\src\HARDWARE\PWM -I..\src\HARDWARE\RTC -I..\src\HARDWARE\SPI -I..\src\HARDWARE\USART2 -I..\src\HARDWARE\TIMER -I..\src\EX -I..\src\USMART -I..\..\..\Libraries\CMSIS\Include -I..\src\ff11a\src -I..\src\ff11a\src\option -I..\src\HARDWARE\LED -I..\src\HARDWARE\OLED -I..\src\ff11a\src -I..\src\ff11a\src\option -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\src\ff11a\src\diskio.c]
                          THUMB

                          AREA ||i.disk_initialize||, CODE, READONLY, ALIGN=1

                  disk_initialize PROC
;;;70     
;;;71     DSTATUS disk_initialize (
000000  0001              MOVS     r1,r0
;;;72     	BYTE pdrv				/* Physical drive nmuber to identify the drive */
;;;73     )
;;;74     {
;;;75     	DSTATUS stat = RES_OK;;
000002  f04f0000          MOV      r0,#0
000006  d004              BEQ      |L1.18|
;;;76     //	int result;
;;;77     
;;;78             //v1000_debug("disk_initialize :%d \r\n",pdrv);
;;;79     
;;;80     	switch (pdrv) {
000008  2901              CMP      r1,#1
00000a  d002              BEQ      |L1.18|
00000c  2902              CMP      r1,#2
00000e  d000              BEQ      |L1.18|
;;;81     	case ATA :
;;;82     		//result = ATA_disk_initialize();
;;;83     
;;;84     		// translate the reslut code here
;;;85             stat = RES_OK;
;;;86     
;;;87     		return stat;
;;;88     
;;;89     	case MMC :
;;;90     		//result = MMC_disk_initialize();
;;;91     
;;;92     		// translate the reslut code here
;;;93     
;;;94     		return stat;
;;;95     
;;;96     	case USB :
;;;97     		//result = USB_disk_initialize();
;;;98     
;;;99     		// translate the reslut code here
;;;100    
;;;101    		return stat;
;;;102    	}
;;;103    	return STA_NOINIT;
000010  2001              MOVS     r0,#1
                  |L1.18|
;;;104    }
000012  4770              BX       lr
;;;105    
                          ENDP


                          AREA ||i.disk_ioctl||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  disk_ioctl PROC
;;;230    #if _USE_IOCTL
;;;231    DRESULT disk_ioctl (
000000  b570              PUSH     {r4-r6,lr}
;;;232    	BYTE pdrv,		/* Physical drive nmuber (0..) */
;;;233    	BYTE cmd,		/* Control code */
;;;234    	void *buff		/* Buffer to send/receive control data */
;;;235    )
;;;236    {
000002  4614              MOV      r4,r2
000004  460e              MOV      r6,r1
;;;237    	DRESULT res = RES_OK;
000006  2500              MOVS     r5,#0
000008  b128              CBZ      r0,|L2.22|
;;;238    
;;;239    	switch (pdrv) {
00000a  2801              CMP      r0,#1
00000c  d015              BEQ      |L2.58|
00000e  2802              CMP      r0,#2
000010  d013              BEQ      |L2.58|
;;;240    	case ATA :
;;;241    
;;;242    		// Process of the command for the ATA drive
;;;243            v1000_debug("disk ioctl :%d \r\n",pdrv);   
;;;244    
;;;245    		if(system_flag_table->usbdisk_flag == 1)
;;;246    			return RES_OK;
;;;247    		
;;;248            switch(cmd)
;;;249            {
;;;250                 case CTRL_SYNC:
;;;251                      res = RES_OK;
;;;252                   break;
;;;253                 
;;;254                 case GET_SECTOR_SIZE:
;;;255                   
;;;256                       *(WORD*)buff = NAND_PAGE_SIZE;
;;;257                       res = RES_OK;
;;;258                   break;
;;;259                 
;;;260                 case GET_SECTOR_COUNT:
;;;261                       
;;;262                       *(DWORD*)buff = NAND_BLOCK_SIZE*NAND_ZONE_SIZE;
;;;263                       res = RES_OK;
;;;264    
;;;265                   break;
;;;266                 
;;;267                 case GET_BLOCK_SIZE:
;;;268                   
;;;269                       *(DWORD*)buff = NAND_BLOCK_SIZE;
;;;270                       res = RES_OK;
;;;271    
;;;272                   break;
;;;273                 
;;;274                 
;;;275                 default:
;;;276                   
;;;277                   res = RES_PARERR;
;;;278                   break;
;;;279            }
;;;280    		return res;
;;;281    
;;;282    	case MMC :
;;;283    
;;;284    		// Process of the command for the MMC/SD card
;;;285    
;;;286    		return res;
;;;287    
;;;288    	case USB :
;;;289    
;;;290    		// Process of the command the USB drive
;;;291    
;;;292    		return res;
;;;293    	}
;;;294    
;;;295    	return RES_PARERR;
000012  2004              MOVS     r0,#4
;;;296    }
000014  bd70              POP      {r4-r6,pc}
                  |L2.22|
000016  4601              MOV      r1,r0                 ;243
000018  a00f              ADR      r0,|L2.88|
00001a  f7fffffe          BL       __2printf
00001e  4813              LDR      r0,|L2.108|
000020  6800              LDR      r0,[r0,#0]            ;245  ; system_flag_table
000022  f8900038          LDRB     r0,[r0,#0x38]         ;245
000026  2801              CMP      r0,#1                 ;245
000028  d009              BEQ      |L2.62|
00002a  b136              CBZ      r6,|L2.58|
00002c  2e01              CMP      r6,#1                 ;248
00002e  d00c              BEQ      |L2.74|
000030  2e02              CMP      r6,#2                 ;248
000032  d006              BEQ      |L2.66|
000034  2e03              CMP      r6,#3                 ;248
000036  d00b              BEQ      |L2.80|
000038  2504              MOVS     r5,#4                 ;277
                  |L2.58|
00003a  4628              MOV      r0,r5                 ;292
00003c  bd70              POP      {r4-r6,pc}
                  |L2.62|
00003e  2000              MOVS     r0,#0                 ;246
000040  bd70              POP      {r4-r6,pc}
                  |L2.66|
000042  f44f7000          MOV      r0,#0x200             ;256
000046  8020              STRH     r0,[r4,#0]            ;256
000048  e7f7              B        |L2.58|
                  |L2.74|
00004a  f64770f8          MOV      r0,#0x7ff8            ;262
00004e  e000              B        |L2.82|
                  |L2.80|
000050  2008              MOVS     r0,#8                 ;269
                  |L2.82|
000052  6020              STR      r0,[r4,#0]            ;262
000054  e7f1              B        |L2.58|
;;;297    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
000058  6469736b          DCB      "disk ioctl :%d \r\n",0
00005c  20696f63
000060  746c203a
000064  2564200d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L2.108|
                          DCD      system_flag_table

                          AREA ||i.disk_read||, CODE, READONLY, ALIGN=2

                  disk_read PROC
;;;111    
;;;112    DRESULT disk_read (
000000  b570              PUSH     {r4-r6,lr}
;;;113    	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
;;;114    	BYTE *buff,		/* Data buffer to store read data */
;;;115    	DWORD sector,	/* Sector address in LBA */
;;;116    	UINT count		/* Number of sectors to read */
;;;117    )
;;;118    {
000002  460d              MOV      r5,r1
;;;119    	DRESULT res = RES_OK;
000004  2400              MOVS     r4,#0
000006  b128              CBZ      r0,|L3.20|
;;;120    //	int result;
;;;121    	switch (pdrv) {
000008  2801              CMP      r0,#1
00000a  d012              BEQ      |L3.50|
00000c  2802              CMP      r0,#2
00000e  d010              BEQ      |L3.50|
;;;122    	case ATA :
;;;123    		// translate the arguments here
;;;124    
;;;125    		//result = ATA_disk_read(buff, sector, count);
;;;126           // v1000_debug("read sector :%d \r\n",sector);
;;;127            //v1000_debug(" count :%d \r\n",count);
;;;128      		if(system_flag_table->usbdisk_flag == 1)
;;;129    			return RES_OK;
;;;130            SPI_Flash_Read(buff,sector*NAND_PAGE_SIZE,count*NAND_PAGE_SIZE);   
;;;131      #if 0              
;;;132            for(i = 0;i<512;i++)
;;;133              {
;;;134                    v1000_debug("%x ",buff[i]);
;;;135                    if(i%32 == 0)
;;;136                    v1000_debug("\r\n");  
;;;137              }
;;;138      #endif    
;;;139    		res = RES_OK;
;;;140    		// translate the reslut code here
;;;141    
;;;142    		return res;
;;;143    
;;;144    	case MMC :
;;;145    		// translate the arguments here
;;;146    
;;;147    		//result = MMC_disk_read(buff, sector, count);
;;;148    
;;;149    		// translate the reslut code here
;;;150    
;;;151    		return res;
;;;152    
;;;153    	case USB :
;;;154    		// translate the arguments here
;;;155    
;;;156    		//result = USB_disk_read(buff, sector, count);
;;;157    
;;;158    		// translate the reslut code here
;;;159    
;;;160    		return res;
;;;161    	}
;;;162    
;;;163    	return RES_PARERR;
000010  2004              MOVS     r0,#4
;;;164    }
000012  bd70              POP      {r4-r6,pc}
                  |L3.20|
000014  4809              LDR      r0,|L3.60|
000016  6800              LDR      r0,[r0,#0]            ;128  ; system_flag_table
000018  f8900038          LDRB     r0,[r0,#0x38]         ;128
00001c  2801              CMP      r0,#1                 ;128
00001e  d00a              BEQ      |L3.54|
000020  f64f70ff          MOV      r0,#0xffff            ;130
000024  ea002043          AND      r0,r0,r3,LSL #9       ;130
000028  0251              LSLS     r1,r2,#9              ;130
00002a  4602              MOV      r2,r0                 ;130
00002c  4628              MOV      r0,r5                 ;130
00002e  f7fffffe          BL       SPI_Flash_Read
                  |L3.50|
000032  4620              MOV      r0,r4                 ;160
000034  bd70              POP      {r4-r6,pc}
                  |L3.54|
000036  2000              MOVS     r0,#0                 ;129
000038  bd70              POP      {r4-r6,pc}
;;;165    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      system_flag_table

                          AREA ||i.disk_status||, CODE, READONLY, ALIGN=2

                  disk_status PROC
;;;26     
;;;27     DSTATUS disk_status (
000000  b510              PUSH     {r4,lr}
;;;28     	BYTE pdrv		/* Physical drive nmuber to identify the drive */
;;;29     )
;;;30     {
000002  0001              MOVS     r1,r0
;;;31     	DSTATUS stat = RES_OK;
000004  f04f0000          MOV      r0,#0
000008  d005              BEQ      |L4.22|
;;;32         u8 result;
;;;33     
;;;34         //v1000_debug("disk_status :%d \r\n",pdrv);
;;;35     
;;;36     	switch (pdrv) {
00000a  2901              CMP      r1,#1
00000c  d002              BEQ      |L4.20|
00000e  2902              CMP      r1,#2
000010  d000              BEQ      |L4.20|
;;;37     	case ATA :
;;;38     		//result = ATA_disk_status();
;;;39     		if(system_flag_table->usbdisk_flag == 1)
;;;40     			return RES_OK;
;;;41     
;;;42               result = SPI_Flash_ReadSR();
;;;43               //v1000_debug("readsr :%d \r\n",result);
;;;44     		// translate the reslut code here
;;;45                   
;;;46     		return RES_OK;
;;;47     
;;;48     	case MMC :
;;;49     		//result = MMC_disk_status();
;;;50     
;;;51     		// translate the reslut code here
;;;52     
;;;53     		return stat;
;;;54     
;;;55     	case USB :
;;;56     		//result = USB_disk_status();
;;;57     
;;;58     		// translate the reslut code here
;;;59     
;;;60     		return stat;
;;;61     	}
;;;62     	return STA_NOINIT;
000012  2001              MOVS     r0,#1
                  |L4.20|
;;;63     }
000014  bd10              POP      {r4,pc}
                  |L4.22|
000016  4805              LDR      r0,|L4.44|
000018  6800              LDR      r0,[r0,#0]            ;39  ; system_flag_table
00001a  f8900038          LDRB     r0,[r0,#0x38]         ;39
00001e  2801              CMP      r0,#1                 ;39
000020  d001              BEQ      |L4.38|
000022  f7fffffe          BL       SPI_Flash_ReadSR
                  |L4.38|
000026  2000              MOVS     r0,#0                 ;40
000028  bd10              POP      {r4,pc}
;;;64     
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      system_flag_table

                          AREA ||i.disk_write||, CODE, READONLY, ALIGN=2

                  disk_write PROC
;;;172    #if _USE_WRITE
;;;173    DRESULT disk_write (
000000  b570              PUSH     {r4-r6,lr}
;;;174    	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
;;;175    	const BYTE *buff,	/* Data to be written */
;;;176    	DWORD sector,		/* Sector address in LBA */
;;;177    	UINT count			/* Number of sectors to write */
;;;178    )
;;;179    {
000002  460d              MOV      r5,r1
;;;180    	DRESULT res = RES_OK;
000004  2400              MOVS     r4,#0
000006  b128              CBZ      r0,|L5.20|
;;;181    //nt result;
;;;182    
;;;183    	switch (pdrv) {
000008  2801              CMP      r0,#1
00000a  d012              BEQ      |L5.50|
00000c  2802              CMP      r0,#2
00000e  d010              BEQ      |L5.50|
;;;184    	case ATA :
;;;185    		// translate the arguments here
;;;186    
;;;187            //v1000_debug("write sector :%d \r\n",sector);
;;;188            //v1000_debug(" count :%d \r\n",count);
;;;189    		if(system_flag_table->usbdisk_flag == 1)
;;;190    			return RES_OK;
;;;191    
;;;192            SPI_Flash_Write((BYTE *)buff,sector*NAND_PAGE_SIZE,count*NAND_PAGE_SIZE);   
;;;193            //SPI_Flash_writePage((BYTE *)buff,sector,count);   
;;;194            res = RES_OK;
;;;195    		//result = ATA_disk_write(buff, sector, count);
;;;196    
;;;197    		// translate the reslut code here
;;;198    
;;;199    		return res;
;;;200    
;;;201    	case MMC :
;;;202    		// translate the arguments here
;;;203    
;;;204    		//result = MMC_disk_write(buff, sector, count);
;;;205    
;;;206    		// translate the reslut code here
;;;207    
;;;208    		return res;
;;;209    
;;;210    	case USB :
;;;211    		// translate the arguments here
;;;212    
;;;213    		//result = USB_disk_write(buff, sector, count);
;;;214    
;;;215    		// translate the reslut code here
;;;216    
;;;217    		return res;
;;;218    	}
;;;219    
;;;220    	return RES_PARERR;
000010  2004              MOVS     r0,#4
;;;221    }
000012  bd70              POP      {r4-r6,pc}
                  |L5.20|
000014  4809              LDR      r0,|L5.60|
000016  6800              LDR      r0,[r0,#0]            ;189  ; system_flag_table
000018  f8900038          LDRB     r0,[r0,#0x38]         ;189
00001c  2801              CMP      r0,#1                 ;189
00001e  d00a              BEQ      |L5.54|
000020  f64f70ff          MOV      r0,#0xffff            ;192
000024  ea002043          AND      r0,r0,r3,LSL #9       ;192
000028  0251              LSLS     r1,r2,#9              ;192
00002a  4602              MOV      r2,r0                 ;192
00002c  4628              MOV      r0,r5                 ;192
00002e  f7fffffe          BL       SPI_Flash_Write
                  |L5.50|
000032  4620              MOV      r0,r4                 ;217
000034  bd70              POP      {r4-r6,pc}
                  |L5.54|
000036  2000              MOVS     r0,#0                 ;190
000038  bd70              POP      {r4-r6,pc}
;;;222    #endif
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      system_flag_table

;*** Start embedded assembler ***

#line 1 "..\\src\\ff11a\\src\\diskio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_diskio_c_fd8865f0____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_diskio_c_fd8865f0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_diskio_c_fd8865f0____REVSH|
#line 128
|__asm___8_diskio_c_fd8865f0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
