; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\pwm.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\pwm.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -I..\src\user -I..\src\user\include -I..\src\SYSTEM\delay -I..\src\SYSTEM\sys -I..\src\SYSTEM\usart -I..\src\HARDWARE\ADC -I..\src\HARDWARE\BMP -I..\src\HARDWARE\DMA -I..\src\HARDWARE\FLASH -I..\src\HARDWARE\GPS -I..\src\HARDWARE\KEY -I..\src\HARDWARE\PWM -I..\src\HARDWARE\RTC -I..\src\HARDWARE\SPI -I..\src\HARDWARE\USART2 -I..\src\HARDWARE\TIMER -I..\src\EX -I..\src\USMART -I..\..\..\Libraries\CMSIS\Include -I..\src\ff11a\src -I..\src\ff11a\src\option -I..\src\HARDWARE\LED -I..\src\HARDWARE\OLED -I..\src\ff11a\src -I..\src\ff11a\src\option -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\src\HARDWARE\PWM\pwm.c]
                          THUMB

                          AREA ||i.Button_key_perss||, CODE, READONLY, ALIGN=2

                  Button_key_perss PROC
;;;137    
;;;138    void Button_key_perss(u8 key_perss)
000000  b51c              PUSH     {r2-r4,lr}
;;;139    {
;;;140        
;;;141    
;;;142        GPIO_InitTypeDef GPIO_InitStructure;
;;;143        if(key_perss == 1)
;;;144        {
;;;145            if(system_flag_table->wanner_sound == 0)
;;;146                return;
;;;147    
;;;148            PWM_Init();	
;;;149            TIM_ARRPreloadConfig(TIM2, ENABLE);
000002  f04f4480          MOV      r4,#0x40000000
000006  2801              CMP      r0,#1                 ;143
000008  d018              BEQ      |L1.60|
;;;150    
;;;151            /* TIM3 enable counter */
;;;152            TIM_Cmd(TIM2, ENABLE);
;;;153            //v1000_debug("\r\n Button_key_perss 0");
;;;154        }
;;;155        else	
;;;156        {
;;;157            //return;
;;;158            GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
00000a  2002              MOVS     r0,#2
;;;159            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00000c  9000              STR      r0,[sp,#0]
00000e  2000              MOVS     r0,#0
000010  f88d0004          STRB     r0,[sp,#4]
;;;160            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000014  f88d0007          STRB     r0,[sp,#7]
;;;161    
;;;162            GPIO_Init(GPIOA, &GPIO_InitStructure);
000018  4669              MOV      r1,sp
00001a  4811              LDR      r0,|L1.96|
00001c  f7fffffe          BL       GPIO_Init
;;;163            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, DISABLE);
000020  2100              MOVS     r1,#0
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;164            TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Disable);	 
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       TIM_OC2PreloadConfig
;;;165            TIM_ARRPreloadConfig(TIM2, DISABLE);
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       TIM_ARRPreloadConfig
;;;166            /* 	TIM3 enable counter */
;;;167            TIM_Cmd(TIM2, DISABLE);
000038  2100              MOVS     r1,#0
00003a  e00c              B        |L1.86|
                  |L1.60|
00003c  4809              LDR      r0,|L1.100|
00003e  6800              LDR      r0,[r0,#0]            ;145  ; system_flag_table
000040  f8900032          LDRB     r0,[r0,#0x32]         ;145
000044  2800              CMP      r0,#0                 ;145
000046  d009              BEQ      |L1.92|
000048  f7fffffe          BL       PWM_Init
00004c  2101              MOVS     r1,#1                 ;149
00004e  4620              MOV      r0,r4                 ;149
000050  f7fffffe          BL       TIM_ARRPreloadConfig
000054  2101              MOVS     r1,#1                 ;152
                  |L1.86|
000056  4620              MOV      r0,r4                 ;152
000058  f7fffffe          BL       TIM_Cmd
                  |L1.92|
;;;168    	     //v1000_debug("\r\n Button_key_perss 1");
;;;169        }
;;;170    
;;;171    
;;;172    }
00005c  bd1c              POP      {r2-r4,pc}
;;;173    
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0x40020000
                  |L1.100|
                          DCD      system_flag_table

                          AREA ||i.PWM_Init||, CODE, READONLY, ALIGN=2

                  PWM_Init PROC
;;;56       */
;;;57     void PWM_Init(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;58     {
;;;59       /*!< At this stage the microcontroller clock setting is already configured, 
;;;60          this is done through SystemInit() function which is called from startup
;;;61          file (startup_stm32l1xx_xx.s) before to branch to application main.
;;;62          To reconfigure the default setting of SystemInit() function, refer to
;;;63          system_stm32l1xx.c file
;;;64        */     
;;;65       TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;66       TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;67       GPIO_InitTypeDef GPIO_InitStructure;
;;;68       //uint16_t CCR1_Val = 333;
;;;69       uint16_t CCR2_Val = 200;
;;;70       
;;;71       uint16_t PrescalerValue = 0;
;;;72     
;;;73       /* --------------------------- System Clocks Configuration ---------------------*/
;;;74       /* TIM3 clock enable */
;;;75       RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000002  2101              MOVS     r1,#1
000004  b089              SUB      sp,sp,#0x24           ;58
000006  25c8              MOVS     r5,#0xc8              ;69
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;76       /* GPIOA and GPIOB clock enable */
;;;77       RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
00000e  2101              MOVS     r1,#1
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;78     
;;;79       /*--------------------------------- GPIO Configuration -------------------------*/
;;;80       /* GPIOA Configuration: Pin 6 and 7 */
;;;81       GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
000016  2002              MOVS     r0,#2
;;;82       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000018  f88d0004          STRB     r0,[sp,#4]
;;;83       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2400              MOVS     r4,#0
00001e  9000              STR      r0,[sp,#0]            ;82
000020  f88d4006          STRB     r4,[sp,#6]
;;;84       GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
000024  2601              MOVS     r6,#1
000026  f88d6007          STRB     r6,[sp,#7]
;;;85       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00002a  2003              MOVS     r0,#3
;;;86     
;;;87       GPIO_Init(GPIOA, &GPIO_InitStructure);
00002c  4f1c              LDR      r7,|L2.160|
00002e  f88d0005          STRB     r0,[sp,#5]            ;85
000032  4669              MOV      r1,sp
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       GPIO_Init
;;;88       GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
00003a  2201              MOVS     r2,#1
00003c  4611              MOV      r1,r2
00003e  4638              MOV      r0,r7
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;89     
;;;90     
;;;91     
;;;92     
;;;93       /* -----------------------------------------------------------------------
;;;94         TIM2 Configuration: generate 4 PWM signals with 4 different duty cycles:
;;;95         The TIM3CLK frequency is set to SystemCoreClock (Hz), to get TIM3 counter
;;;96         clock at 8 MHz the Prescaler is computed as following:
;;;97          - Prescaler = (TIM3CLK / TIM3 counter clock) - 1
;;;98         SystemCoreClock is set to 32 MHz for  Medium-density devices.
;;;99     
;;;100        The TIM3 is running at 12 KHz: TIM3 Frequency = TIM3 counter clock/(ARR + 1)
;;;101                                                      = 8 MHz / 666 = 12 KHz
;;;102        TIM3 Channel1 duty cycle = (TIM3_CCR1/ TIM3_ARR)* 100 = 50%
;;;103        TIM3 Channel2 duty cycle = (TIM3_CCR2/ TIM3_ARR)* 100 = 37.5%
;;;104        TIM3 Channel3 duty cycle = (TIM3_CCR3/ TIM3_ARR)* 100 = 25%
;;;105        TIM3 Channel4 duty cycle = (TIM3_CCR4/ TIM3_ARR)* 100 = 12.5%
;;;106      ----------------------------------------------------------------------- */
;;;107      /* Compute the prescaler value */
;;;108      PrescalerValue = (uint16_t) (SystemCoreClock / 800000) - 1;
000044  4817              LDR      r0,|L2.164|
000046  4918              LDR      r1,|L2.168|
;;;109      /* Time base configuration */
;;;110      TIM_TimeBaseStructure.TIM_Period = 400;
;;;111      TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
;;;112      TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;113      TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;114    
;;;115      TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
000048  06ef              LSLS     r7,r5,#27
00004a  6800              LDR      r0,[r0,#0]            ;108  ; SystemCoreClock
00004c  f8ad4010          STRH     r4,[sp,#0x10]         ;112
000050  fbb0f0f1          UDIV     r0,r0,r1              ;108
000054  1e40              SUBS     r0,r0,#1              ;110
000056  0069              LSLS     r1,r5,#1              ;110
000058  f8ad0008          STRH     r0,[sp,#8]            ;111
00005c  9103              STR      r1,[sp,#0xc]          ;111
00005e  f8ad400a          STRH     r4,[sp,#0xa]          ;113
000062  a902              ADD      r1,sp,#8
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       TIM_TimeBaseInit
;;;116    
;;;117    
;;;118      /* PWM1 Mode configuration: Channel1 */
;;;119      TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
00006a  2060              MOVS     r0,#0x60
00006c  f8ad0014          STRH     r0,[sp,#0x14]
;;;120      TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000070  f8ad401c          STRH     r4,[sp,#0x1c]
;;;121      /* PWM1 Mode configuration: Channel2 */
;;;122      TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000074  f8ad6016          STRH     r6,[sp,#0x16]
;;;123      TIM_OCInitStructure.TIM_Pulse = CCR2_Val;
;;;124    
;;;125      TIM_OC2Init(TIM2, &TIM_OCInitStructure);
000078  a905              ADD      r1,sp,#0x14
00007a  4638              MOV      r0,r7
00007c  9506              STR      r5,[sp,#0x18]
00007e  f7fffffe          BL       TIM_OC2Init
;;;126    
;;;127      TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
000082  2108              MOVS     r1,#8
000084  4638              MOV      r0,r7
000086  f7fffffe          BL       TIM_OC2PreloadConfig
;;;128    
;;;129      TIM_ARRPreloadConfig(TIM2, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  4638              MOV      r0,r7
00008e  f7fffffe          BL       TIM_ARRPreloadConfig
;;;130    
;;;131      /* TIM3 enable counter */
;;;132      TIM_Cmd(TIM2, DISABLE);
000092  2100              MOVS     r1,#0
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       TIM_Cmd
;;;133    
;;;134    
;;;135    }
00009a  b009              ADD      sp,sp,#0x24
00009c  bdf0              POP      {r4-r7,pc}
;;;136    
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
                          DCD      0x40020000
                  |L2.164|
                          DCD      SystemCoreClock
                  |L2.168|
                          DCD      0x000c3500

;*** Start embedded assembler ***

#line 1 "..\\src\\HARDWARE\\PWM\\pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_pwm_c_PWM_Init____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_pwm_c_PWM_Init____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_pwm_c_PWM_Init____REVSH|
#line 128
|__asm___5_pwm_c_PWM_Init____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
