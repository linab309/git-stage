; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\spi.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\spi.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -I..\src\user -I..\src\user\include -I..\src\SYSTEM\delay -I..\src\SYSTEM\sys -I..\src\SYSTEM\usart -I..\src\HARDWARE\ADC -I..\src\HARDWARE\BMP -I..\src\HARDWARE\DMA -I..\src\HARDWARE\FLASH -I..\src\HARDWARE\GPS -I..\src\HARDWARE\KEY -I..\src\HARDWARE\PWM -I..\src\HARDWARE\RTC -I..\src\HARDWARE\SPI -I..\src\HARDWARE\USART2 -I..\src\HARDWARE\TIMER -I..\src\EX -I..\src\USMART -I..\..\..\Libraries\CMSIS\Include -I..\src\ff11a\src -I..\src\ff11a\src\option -I..\src\HARDWARE\LED -I..\src\HARDWARE\OLED -I..\src\ff11a\src -I..\src\ff11a\src\option -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\src\HARDWARE\SPI\spi.c]
                          THUMB

                          AREA ||i.SPIx_Init||, CODE, READONLY, ALIGN=2

                  SPIx_Init PROC
;;;18     //这里针是对SPI1的初始化
;;;19     void SPIx_Init(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;20     {	 
;;;21     	//RCC->APB2ENR|=1<<2;       //PORTA时钟使能 	 
;;;22     	//RCC->APB2ENR|=1<<12;      //SPI1时钟使能 
;;;23     
;;;24     
;;;25       GPIO_InitTypeDef  GPIO_InitStructure;
;;;26     //  SPI_InitTypeDef   SPI_InitStructure;
;;;27     
;;;28       /*!< sEE_CS_GPIO, sEE_MOSI_GPIO, sEE_MISO_GPIO and sEE_SCK_GPIO 
;;;29            Periph clock enable */
;;;30       RCC_AHBPeriphClockCmd(sEE_SPI_CS_GPIO_CLK | sEE_SPI_MOSI_GPIO_CLK | sEE_SPI_MISO_GPIO_CLK |
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;31                             sEE_SPI_SCK_GPIO_CLK , ENABLE);
;;;32     
;;;33       /*!< sEE Periph clock enable */
;;;34       RCC_APB2PeriphClockCmd(sEE_SPI_CLK, ENABLE); 
00000c  2101              MOVS     r1,#1
00000e  0308              LSLS     r0,r1,#12
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;35     
;;;36       /*!< Configure sEE pins: SCK */
;;;37       GPIO_InitStructure.GPIO_Pin = sEE_SPI_SCK_PIN;
000014  2020              MOVS     r0,#0x20
;;;38       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000016  9000              STR      r0,[sp,#0]
000018  2002              MOVS     r0,#2
00001a  f88d0004          STRB     r0,[sp,#4]
;;;39       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
00001e  2503              MOVS     r5,#3
000020  f88d5005          STRB     r5,[sp,#5]
;;;40       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000024  2600              MOVS     r6,#0
;;;41       GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
;;;42       GPIO_Init(sEE_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000026  4f2c              LDR      r7,|L1.216|
000028  f88d6006          STRB     r6,[sp,#6]            ;40
00002c  2401              MOVS     r4,#1                 ;41
00002e  f88d4007          STRB     r4,[sp,#7]            ;41
000032  4669              MOV      r1,sp
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       GPIO_Init
;;;43     
;;;44       /*!< Configure sEE_SPI pins: MISO */
;;;45       GPIO_InitStructure.GPIO_Pin = sEE_SPI_MISO_PIN;
00003a  2040              MOVS     r0,#0x40
;;;46       GPIO_Init(sEE_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
00003c  9000              STR      r0,[sp,#0]
00003e  4669              MOV      r1,sp
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       GPIO_Init
;;;47     
;;;48       /*!< Configure sEE_SPI pins: MOSI */
;;;49       GPIO_InitStructure.GPIO_Pin = sEE_SPI_MOSI_PIN;
000046  2080              MOVS     r0,#0x80
;;;50       GPIO_Init(sEE_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000048  9000              STR      r0,[sp,#0]
00004a  4669              MOV      r1,sp
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       GPIO_Init
;;;51     
;;;52       /*!< Configure sEE_SPI_CS_PIN pin: sEE_SPI Card CS pin */
;;;53       GPIO_InitStructure.GPIO_Pin = sEE_SPI_CS_PIN;
;;;54       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000052  f88d4004          STRB     r4,[sp,#4]
000056  2010              MOVS     r0,#0x10              ;53
;;;55       GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000058  f88d6006          STRB     r6,[sp,#6]
00005c  9000              STR      r0,[sp,#0]            ;54
;;;56       GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00005e  f88d4007          STRB     r4,[sp,#7]
;;;57       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
000062  f88d5005          STRB     r5,[sp,#5]
;;;58       GPIO_Init(sEE_SPI_CS_GPIO_PORT, &GPIO_InitStructure);
000066  4669              MOV      r1,sp
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       GPIO_Init
;;;59     
;;;60       /* Connect PXx to sEE_SPI_SCK */
;;;61       GPIO_PinAFConfig(sEE_SPI_SCK_GPIO_PORT, sEE_SPI_SCK_SOURCE, sEE_SPI_SCK_AF);
00006e  2205              MOVS     r2,#5
000070  4611              MOV      r1,r2
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       GPIO_PinAFConfig
;;;62     
;;;63       /* Connect PXx to sEE_SPI_MISO */
;;;64       GPIO_PinAFConfig(sEE_SPI_MISO_GPIO_PORT, sEE_SPI_MISO_SOURCE, sEE_SPI_MISO_AF); 
000078  2205              MOVS     r2,#5
00007a  2106              MOVS     r1,#6
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       GPIO_PinAFConfig
;;;65     
;;;66       /* Connect PXx to sEE_SPI_MOSI */
;;;67       GPIO_PinAFConfig(sEE_SPI_MOSI_GPIO_PORT, sEE_SPI_MOSI_SOURCE, sEE_SPI_MOSI_AF); 
000082  2205              MOVS     r2,#5
000084  2107              MOVS     r1,#7
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       GPIO_PinAFConfig
;;;68       
;;;69     #if 0		   
;;;70     	//这里只针对SPI口初始化
;;;71     	GPIOA->CRL&=0X000FFFFF; 
;;;72     	GPIOA->CRL|=0XBBB00000;//PA5.6.7复用 	    
;;;73     	GPIOA->ODR|=0X7<<5;    //PA5.6.7上拉
;;;74     #endif
;;;75     
;;;76     
;;;77     	SPI1->CR1|=0<<10;//全双工模式	
00008c  4813              LDR      r0,|L1.220|
00008e  8801              LDRH     r1,[r0,#0]
000090  8001              STRH     r1,[r0,#0]
;;;78     	SPI1->CR1|=1<<9; //软件nss管理
000092  8801              LDRH     r1,[r0,#0]
000094  f4417100          ORR      r1,r1,#0x200
000098  8001              STRH     r1,[r0,#0]
;;;79     	SPI1->CR1|=1<<8;  
00009a  8801              LDRH     r1,[r0,#0]
00009c  f4417180          ORR      r1,r1,#0x100
0000a0  8001              STRH     r1,[r0,#0]
;;;80     
;;;81     	SPI1->CR1|=1<<2; //SPI主机
0000a2  8801              LDRH     r1,[r0,#0]
0000a4  f0410104          ORR      r1,r1,#4
0000a8  8001              STRH     r1,[r0,#0]
;;;82     	SPI1->CR1|=0<<11;//8bit数据格式	
0000aa  8801              LDRH     r1,[r0,#0]
0000ac  8001              STRH     r1,[r0,#0]
;;;83     	SPI1->CR1|=1<<1; //空闲模式下SCK为1 CPOL=1
0000ae  8801              LDRH     r1,[r0,#0]
0000b0  f0410102          ORR      r1,r1,#2
0000b4  8001              STRH     r1,[r0,#0]
;;;84     	SPI1->CR1|=1<<0; //数据采样从第二个时间边沿开始,CPHA=1  
0000b6  8801              LDRH     r1,[r0,#0]
0000b8  f0410101          ORR      r1,r1,#1
0000bc  8001              STRH     r1,[r0,#0]
;;;85     	SPI1->CR1|=0<<3; //Fsck=Fcpu/256
0000be  8801              LDRH     r1,[r0,#0]
0000c0  8001              STRH     r1,[r0,#0]
;;;86     	SPI1->CR1|=0<<7; //MSBfirst   
0000c2  8801              LDRH     r1,[r0,#0]
0000c4  8001              STRH     r1,[r0,#0]
;;;87     	SPI1->CR1|=1<<6; //SPI设备使能
0000c6  8801              LDRH     r1,[r0,#0]
0000c8  f0410140          ORR      r1,r1,#0x40
0000cc  8001              STRH     r1,[r0,#0]
;;;88     	SPIx_ReadWriteByte(0xff);//启动传输		 
0000ce  20ff              MOVS     r0,#0xff
0000d0  f7fffffe          BL       SPIx_ReadWriteByte
;;;89     }   
0000d4  e8bd81fc          POP      {r2-r8,pc}
;;;90     //SPI 速度设置函数
                          ENDP

                  |L1.216|
                          DCD      0x40020000
                  |L1.220|
                          DCD      0x40013000

                          AREA ||i.SPIx_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SPIx_ReadWriteByte PROC
;;;116    //返回值:读取到的字节
;;;117    u8 SPIx_ReadWriteByte(u8 TxData)
000000  2100              MOVS     r1,#0
;;;118    {		
;;;119    	u8 retry=0;				 
;;;120    	while((SPI1->SR&1<<1)==0)//等待发送区空	
000002  4a0c              LDR      r2,|L2.52|
000004  e003              B        |L2.14|
                  |L2.6|
000006  1c49              ADDS     r1,r1,#1              ;118
;;;121    	{
;;;122    		retry++;
000008  b2c9              UXTB     r1,r1
;;;123    		if(retry>200)return 0;
00000a  29c8              CMP      r1,#0xc8
00000c  d809              BHI      |L2.34|
                  |L2.14|
00000e  8913              LDRH     r3,[r2,#8]            ;120
000010  079b              LSLS     r3,r3,#30             ;120
000012  d5f8              BPL      |L2.6|
;;;124    	}			  
;;;125    	SPI1->DR=TxData;	 	  //发送一个byte 
000014  8190              STRH     r0,[r2,#0xc]
;;;126    	retry=0;
000016  2000              MOVS     r0,#0
;;;127    	while((SPI1->SR&1<<0)==0) //等待接收完一个byte  
000018  e005              B        |L2.38|
                  |L2.26|
00001a  1c40              ADDS     r0,r0,#1
;;;128    	{
;;;129    		retry++;
00001c  b2c0              UXTB     r0,r0
;;;130    		if(retry>200)return 0;
00001e  28c8              CMP      r0,#0xc8
000020  d901              BLS      |L2.38|
                  |L2.34|
000022  2000              MOVS     r0,#0
;;;131    	}	  						    
;;;132    	return SPI1->DR;          //返回收到的数据				    
;;;133    }
000024  4770              BX       lr
                  |L2.38|
000026  8911              LDRH     r1,[r2,#8]            ;127
000028  07c9              LSLS     r1,r1,#31             ;127
00002a  d0f6              BEQ      |L2.26|
00002c  8990              LDRH     r0,[r2,#0xc]          ;132
00002e  b2c0              UXTB     r0,r0                 ;132
000030  4770              BX       lr
;;;134    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40013000

                          AREA ||i.SPIx_SetSpeed||, CODE, READONLY, ALIGN=2

                  SPIx_SetSpeed PROC
;;;95     //SPI_SPEED_256 256分频 (SPI 281.25K@sys 72M)
;;;96     void SPIx_SetSpeed(u8 SpeedSet)
000000  490d              LDR      r1,|L3.56|
;;;97     {
;;;98     	SPI1->CR1&=0XFFC7;//Fsck=Fcpu/256
000002  880a              LDRH     r2,[r1,#0]
000004  f0220238          BIC      r2,r2,#0x38
000008  800a              STRH     r2,[r1,#0]
00000a  b160              CBZ      r0,|L3.38|
;;;99     	if(SpeedSet==SPI_SPEED_2)//二分频
;;;100    	{
;;;101    		SPI1->CR1|=0<<3;//Fsck=Fpclk/2=36Mhz	
;;;102    	}else if(SpeedSet==SPI_SPEED_8)//八分频 
00000c  2801              CMP      r0,#1
00000e  d00c              BEQ      |L3.42|
;;;103    	{
;;;104    		SPI1->CR1|=2<<3;//Fsck=Fpclk/8=9Mhz	
;;;105    	}else if(SpeedSet==SPI_SPEED_16)//十六分频
000010  2802              CMP      r0,#2
;;;106    	{
;;;107    		SPI1->CR1|=3<<3;//Fsck=Fpclk/16=4.5Mhz
;;;108    	}else			 	 //256分频
;;;109    	{
;;;110    		SPI1->CR1|=7<<3; //Fsck=Fpclk/256=281.25Khz 低速模式
000012  8808              LDRH     r0,[r1,#0]
000014  d00d              BEQ      |L3.50|
000016  f0400038          ORR      r0,r0,#0x38
                  |L3.26|
00001a  8008              STRH     r0,[r1,#0]            ;107
;;;111    	}
;;;112    	SPI1->CR1|=1<<6; //SPI设备使能	  
00001c  8808              LDRH     r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  8008              STRH     r0,[r1,#0]
;;;113    } 
000024  4770              BX       lr
                  |L3.38|
000026  8808              LDRH     r0,[r1,#0]            ;101
000028  e7f7              B        |L3.26|
                  |L3.42|
00002a  8808              LDRH     r0,[r1,#0]            ;104
00002c  f0400010          ORR      r0,r0,#0x10           ;104
000030  e7f3              B        |L3.26|
                  |L3.50|
000032  f0400018          ORR      r0,r0,#0x18           ;107
000036  e7f0              B        |L3.26|
;;;114    //SPIx 读写一个字节
                          ENDP

                  |L3.56|
                          DCD      0x40013000

;*** Start embedded assembler ***

#line 1 "..\\src\\HARDWARE\\SPI\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_3353e991____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_spi_c_3353e991____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_3353e991____REVSH|
#line 128
|__asm___5_spi_c_3353e991____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
