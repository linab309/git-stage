; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\usb_sil.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\usb_sil.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -I..\src\user -I..\src\user\include -I..\src\SYSTEM\delay -I..\src\SYSTEM\sys -I..\src\SYSTEM\usart -I..\src\HARDWARE\ADC -I..\src\HARDWARE\BMP -I..\src\HARDWARE\DMA -I..\src\HARDWARE\FLASH -I..\src\HARDWARE\GPS -I..\src\HARDWARE\KEY -I..\src\HARDWARE\PWM -I..\src\HARDWARE\RTC -I..\src\HARDWARE\SPI -I..\src\HARDWARE\USART2 -I..\src\HARDWARE\TIMER -I..\src\EX -I..\src\USMART -I..\..\..\Libraries\CMSIS\Include -I..\src\ff11a\src -I..\src\ff11a\src\option -I..\src\HARDWARE\LED -I..\src\HARDWARE\OLED -I..\src\ff11a\src -I..\src\ff11a\src\option -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\..\..\Libraries\STM32_USB-FS-Device_Driver\src\usb_sil.c]
                          THUMB

                          AREA ||i.USB_SIL_Init||, CODE, READONLY, ALIGN=2

                  USB_SIL_Init PROC
;;;47     *******************************************************************************/
;;;48     uint32_t USB_SIL_Init(void)
000000  4905              LDR      r1,|L1.24|
;;;49     {
;;;50       /* USB interrupts initialization */
;;;51       /* clear pending interrupts */
;;;52       _SetISTR(0);
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;53       wInterrupt_Mask = IMR_MSK;
000006  4905              LDR      r1,|L1.28|
000008  f44f4037          MOV      r0,#0xb700
00000c  8008              STRH     r0,[r1,#0]
;;;54       /* set interrupts mask */
;;;55       _SetCNTR(wInterrupt_Mask);
00000e  4902              LDR      r1,|L1.24|
000010  1f09              SUBS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;56       return 0;
000014  2000              MOVS     r0,#0
;;;57     }
000016  4770              BX       lr
;;;58     
                          ENDP

                  |L1.24|
                          DCD      0x40005c44
                  |L1.28|
                          DCD      wInterrupt_Mask

                          AREA ||i.USB_SIL_Read||, CODE, READONLY, ALIGN=1

                  USB_SIL_Read PROC
;;;88     *******************************************************************************/
;;;89     uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
;;;91       uint32_t DataLength = 0;
;;;92     
;;;93       /* Get the number of received data on the selected Endpoint */
;;;94       DataLength = GetEPRxCount(bEpAddr & 0x7F);
000002  f000067f          AND      r6,r0,#0x7f
000006  460d              MOV      r5,r1                 ;90
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       GetEPRxCount
00000e  4604              MOV      r4,r0
000010  4630              MOV      r0,r6
;;;95       
;;;96       /* Use the memory interface function to write to the selected endpoint */
;;;97       PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
000012  f7fffffe          BL       GetEPRxAddr
000016  4601              MOV      r1,r0
000018  4622              MOV      r2,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       PMAToUserBufferCopy
;;;98     
;;;99       /* Return the number of received data */
;;;100      return DataLength;
000020  4620              MOV      r0,r4
;;;101    }
000022  bd70              POP      {r4-r6,pc}
;;;102    
                          ENDP


                          AREA ||i.USB_SIL_Write||, CODE, READONLY, ALIGN=1

                  USB_SIL_Write PROC
;;;68     *******************************************************************************/
;;;69     uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;70     {
;;;71       /* Use the memory interface function to write to the selected endpoint */
;;;72       UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
000002  f000057f          AND      r5,r0,#0x7f
000006  4614              MOV      r4,r2                 ;70
000008  460e              MOV      r6,r1                 ;70
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GetEPTxAddr
000010  4601              MOV      r1,r0
000012  b2a2              UXTH     r2,r4
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       UserToPMABufferCopy
;;;73     
;;;74       /* Update the data length in the control register */
;;;75       SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
00001a  b2a1              UXTH     r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       SetEPTxCount
;;;76       
;;;77       return 0;
000022  2000              MOVS     r0,#0
;;;78     }
000024  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32_USB-FS-Device_Driver\\src\\usb_sil.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_sil_c_8614cbb8____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_sil_c_8614cbb8____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_sil_c_8614cbb8____REVSH|
#line 128
|__asm___9_usb_sil_c_8614cbb8____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
