; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\main.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\main.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -I..\src\user -I..\src\user\include -I..\src\SYSTEM\delay -I..\src\SYSTEM\sys -I..\src\SYSTEM\usart -I..\src\HARDWARE\ADC -I..\src\HARDWARE\BMP -I..\src\HARDWARE\DMA -I..\src\HARDWARE\FLASH -I..\src\HARDWARE\GPS -I..\src\HARDWARE\KEY -I..\src\HARDWARE\PWM -I..\src\HARDWARE\RTC -I..\src\HARDWARE\SPI -I..\src\HARDWARE\USART2 -I..\src\HARDWARE\TIMER -I..\src\EX -I..\src\USMART -I..\..\..\Libraries\CMSIS\Include -I..\src\ff11a\src -I..\src\ff11a\src\option -I..\src\HARDWARE\LED -I..\src\HARDWARE\OLED -I..\src\ff11a\src -I..\src\ff11a\src\option -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\src\main.c]
                          THUMB

                          AREA ||i.Del_allgujifile||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  Del_allgujifile PROC
;;;305    
;;;306    void Del_allgujifile(void)
000000  b510              PUSH     {r4,lr}
;;;307    {
000002  b0a4              SUB      sp,sp,#0x90
;;;308        FRESULT fr = FR_OK;
;;;309        unsigned long data_time = 0xffffffff;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;310        char buff[64] = {0};    /* Working buffer */
000008  9022              STR      r0,[sp,#0x88]
00000a  2140              MOVS     r1,#0x40
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memclr4
;;;311        char out_buff[64] = {0};    /* Working buffer */
000012  2140              MOVS     r1,#0x40
000014  a811              ADD      r0,sp,#0x44
000016  f7fffffe          BL       __aeabi_memclr4
;;;312        int filenumber = 0;
00001a  2000              MOVS     r0,#0
;;;313        
;;;314        strcpy(buff, "/");  /* Directory to be emptied */
00001c  9021              STR      r0,[sp,#0x84]
00001e  a00e              ADR      r0,|L1.88|
;;;315    
;;;316        
;;;317    
;;;318        fr = scan_directory_oldfile(buff,out_buff,&data_time,1,&filenumber);
000020  2301              MOVS     r3,#1
000022  8800              LDRH     r0,[r0,#0]            ;314
000024  f8ad0004          STRH     r0,[sp,#4]            ;314
000028  a821              ADD      r0,sp,#0x84
00002a  9000              STR      r0,[sp,#0]
00002c  aa22              ADD      r2,sp,#0x88
00002e  a911              ADD      r1,sp,#0x44
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       scan_directory_oldfile
000036  4604              MOV      r4,r0
;;;319        show_levev_space();  
000038  f7fffffe          BL       show_levev_space
;;;320        if (fr) 
00003c  b12c              CBZ      r4,|L1.74|
;;;321        {
;;;322            v1000_debug("Function failed. (%u)\r\n", fr);
00003e  4621              MOV      r1,r4
000040  a006              ADR      r0,|L1.92|
000042  f7fffffe          BL       __2printf
                  |L1.70|
;;;323            return ;
;;;324        } 
;;;325        else 
;;;326        {
;;;327            v1000_debug("found oldest file :%s. %d\r\n", out_buff,filenumber);
;;;328    
;;;329        }
;;;330    }
000046  b024              ADD      sp,sp,#0x90
000048  bd10              POP      {r4,pc}
                  |L1.74|
00004a  a911              ADD      r1,sp,#0x44           ;327
00004c  a009              ADR      r0,|L1.116|
00004e  9a21              LDR      r2,[sp,#0x84]         ;327
000050  f7fffffe          BL       __2printf
000054  e7f7              B        |L1.70|
;;;331    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
000058  2f00              DCB      "/",0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L1.92|
00005c  46756e63          DCB      "Function failed. (%u)\r\n",0
000060  74696f6e
000064  20666169
000068  6c65642e
00006c  20282575
000070  290d0a00
                  |L1.116|
000074  666f756e          DCB      "found oldest file :%s. %d\r\n",0
000078  64206f6c
00007c  64657374
000080  2066696c
000084  65203a25
000088  732e2025
00008c  640d0a00

                          AREA ||i.Del_oldfile_nospace||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  Del_oldfile_nospace PROC
;;;264    #if 1
;;;265    void Del_oldfile_nospace(void)
000000  b510              PUSH     {r4,lr}
;;;266    {
000002  b0a4              SUB      sp,sp,#0x90
;;;267        FRESULT fr = FR_OK;
;;;268        unsigned long data_time = 0xffffffff;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;269        char buff[64] = {0};    /* Working buffer */
000008  9022              STR      r0,[sp,#0x88]
00000a  2140              MOVS     r1,#0x40
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memclr4
;;;270        char out_buff[64] = {0};    /* Working buffer */
000012  2140              MOVS     r1,#0x40
000014  a811              ADD      r0,sp,#0x44
000016  f7fffffe          BL       __aeabi_memclr4
;;;271        int filenumber = 0;
00001a  2400              MOVS     r4,#0
;;;272    	extern u16  Flash_write_buffer_Index ;
;;;273        
;;;274        strcpy(buff, "/");  /* Directory to be emptied */
00001c  a018              ADR      r0,|L2.128|
00001e  9421              STR      r4,[sp,#0x84]
000020  8800              LDRH     r0,[r0,#0]
000022  f8ad0004          STRH     r0,[sp,#4]
;;;275    
;;;276        show_levev_space();
000026  f7fffffe          BL       show_levev_space
;;;277    
;;;278        fr = scan_directory_oldfile(buff,out_buff,&data_time,0,&filenumber);
00002a  a821              ADD      r0,sp,#0x84
00002c  9000              STR      r0,[sp,#0]
00002e  2300              MOVS     r3,#0
000030  aa22              ADD      r2,sp,#0x88
000032  a911              ADD      r1,sp,#0x44
000034  a801              ADD      r0,sp,#4
000036  f7fffffe          BL       scan_directory_oldfile
00003a  0001              MOVS     r1,r0
;;;279         
;;;280        if (fr) 
00003c  d004              BEQ      |L2.72|
;;;281        {
;;;282            v1000_debug("Function failed. (%u) \r\n", fr );
00003e  a011              ADR      r0,|L2.132|
000040  f7fffffe          BL       __2printf
                  |L2.68|
;;;283            return ;
;;;284        } 
;;;285        else 
;;;286        {
;;;287            v1000_debug("found oldest file :%s.%d\r\n", out_buff,filenumber);
;;;288            if((data_time != 0xffffffff)&&(filenumber > 1))
;;;289            {
;;;290                fr = f_unlink(out_buff);
;;;291                if (fr == FR_OK)
;;;292                    show_levev_space();
;;;293                return ;
;;;294            }
;;;295            else if (filenumber <= 1)
;;;296            {
;;;297                 
;;;298    			 guji_mode = RECORED_STOP;
;;;299    			 Flash_write_buffer_Index = 0;
;;;300                 
;;;301            }
;;;302        }
;;;303    }
000044  b024              ADD      sp,sp,#0x90
000046  bd10              POP      {r4,pc}
                  |L2.72|
000048  a911              ADD      r1,sp,#0x44           ;287
00004a  a015              ADR      r0,|L2.160|
00004c  9a21              LDR      r2,[sp,#0x84]         ;287
00004e  f7fffffe          BL       __2printf
000052  9822              LDR      r0,[sp,#0x88]         ;288
000054  1c40              ADDS     r0,r0,#1              ;288
000056  9821              LDR      r0,[sp,#0x84]         ;288
000058  d009              BEQ      |L2.110|
00005a  2801              CMP      r0,#1                 ;288
00005c  dd09              BLE      |L2.114|
00005e  a811              ADD      r0,sp,#0x44           ;290
000060  f7fffffe          BL       f_unlink
000064  2800              CMP      r0,#0                 ;291
000066  d1ed              BNE      |L2.68|
000068  f7fffffe          BL       show_levev_space
00006c  e7ea              B        |L2.68|
                  |L2.110|
00006e  2801              CMP      r0,#1                 ;295
000070  dce8              BGT      |L2.68|
                  |L2.114|
000072  4912              LDR      r1,|L2.188|
000074  2004              MOVS     r0,#4                 ;298
000076  7008              STRB     r0,[r1,#0]            ;298
000078  4811              LDR      r0,|L2.192|
00007a  8004              STRH     r4,[r0,#0]            ;299
00007c  e7e2              B        |L2.68|
;;;304    
                          ENDP

00007e  0000              DCW      0x0000
                  |L2.128|
000080  2f00              DCB      "/",0
000082  00                DCB      0
000083  00                DCB      0
                  |L2.132|
000084  46756e63          DCB      "Function failed. (%u) \r\n",0
000088  74696f6e
00008c  20666169
000090  6c65642e
000094  20282575
000098  29200d0a
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
0000a0  666f756e          DCB      "found oldest file :%s.%d\r\n",0
0000a4  64206f6c
0000a8  64657374
0000ac  2066696c
0000b0  65203a25
0000b4  732e2564
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L2.188|
                          DCD      guji_mode
                  |L2.192|
                          DCD      Flash_write_buffer_Index

                          AREA ||i.change_clk_need_int||, CODE, READONLY, ALIGN=1

                  change_clk_need_int PROC
;;;199    
;;;200    void change_clk_need_int(u8 mode)
000000  b570              PUSH     {r4-r6,lr}
;;;201    {
;;;202        if(mode == 0)
;;;203          delay_init(16);	     //��ʱ��ʼ��
;;;204        else
;;;205          delay_init(32);	     //��ʱ��ʼ��
;;;206    
;;;207    #if EN_USART1
;;;208        uart_init(115200);
000002  f44f34e1          MOV      r4,#0x1c200
;;;209    #endif
;;;210    
;;;211        if(mode == 0)
;;;212        	USART2_Init(16,38400);	//��ʼ������2
000006  f44f4516          MOV      r5,#0x9600
00000a  b1a0              CBZ      r0,|L3.54|
00000c  2020              MOVS     r0,#0x20              ;205
00000e  f7fffffe          BL       delay_init
000012  4620              MOV      r0,r4                 ;208
000014  f7fffffe          BL       uart_init
;;;213        else
;;;214        	USART2_Init(32,38400);	//��ʼ������2
000018  4629              MOV      r1,r5
00001a  2020              MOVS     r0,#0x20
00001c  f7fffffe          BL       USART2_Init
;;;215        // 	v1000_debug("\n\r Flash_Index :%d",Flash_Index);
;;;216        //	Timerx_Init(99,3199);//10Khz  ����4999 --- 500ms
;;;217        if(mode == 0)
;;;218            Timerx_Init(99,1599);//10Khz  ����4999 --- 500ms
;;;219        else
;;;220            Timerx_Init(99,3199);//10Khz  ����4999 --- 500ms
000020  f640417f          MOV      r1,#0xc7f
                  |L3.36|
000024  2063              MOVS     r0,#0x63
000026  f7fffffe          BL       Timerx_Init
;;;221    
;;;222        SPI_Flash_Init();   //SPI FLASH ��ʼ��
00002a  f7fffffe          BL       SPI_Flash_Init
;;;223    //    PWM_Init();
;;;224        ADC_Config();
00002e  e8bd4070          POP      {r4-r6,lr}
000032  f7ffbffe          B.W      ADC_Config
                  |L3.54|
000036  2010              MOVS     r0,#0x10              ;203
000038  f7fffffe          BL       delay_init
00003c  4620              MOV      r0,r4                 ;208
00003e  f7fffffe          BL       uart_init
000042  4629              MOV      r1,r5                 ;212
000044  2010              MOVS     r0,#0x10              ;212
000046  f7fffffe          BL       USART2_Init
00004a  f240613f          MOV      r1,#0x63f             ;218
00004e  e7e9              B        |L3.36|
;;;225    }
;;;226    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;335    
;;;336    int main (void)
000000  f44f5140          MOV      r1,#0x3000
;;;337    {
;;;338        extern u8 rtc_set_flag;
;;;339    
;;;340        NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
000004  f04f6000          MOV      r0,#0x8000000
000008  f7fffffe          BL       NVIC_SetVectorTable
;;;341    
;;;342      
;;;343    #if 0
;;;344        if (PWR_GetFlagStatus(PWR_CSR_WUF) != RESET)
;;;345        {
;;;346            /* System resumed from STANDBY mode */
;;;347            /* Clear StandBy flag */
;;;348    
;;;349            RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR,ENABLE);
;;;350            PWR_ClearFlag(PWR_FLAG_SB);
;;;351            /* set StandbyWakeup indicator*/
;;;352            //StanbyWakeUp = TRUE;
;;;353            //LED0 =0;
;;;354        }
;;;355        else
;;;356        {
;;;357            /* Reset StandbyWakeup indicator*/
;;;358            //StanbyWakeUp = FALSE;
;;;359            //LED0 =1;
;;;360        }
;;;361    #endif
;;;362       if(gpsx == NULL)
00000c  4c39              LDR      r4,|L4.244|
00000e  6860              LDR      r0,[r4,#4]  ; gpsx
000010  b930              CBNZ     r0,|L4.32|
;;;363        {
;;;364            gpsx = v1000_memalloc(sizeof(nmea_msg));    
000012  2088              MOVS     r0,#0x88
000014  f7fffffe          BL       v1000_memalloc
;;;365            memset(gpsx,0,sizeof(nmea_msg));
000018  2188              MOVS     r1,#0x88
00001a  6060              STR      r0,[r4,#4]  ; gpsx
00001c  f7fffffe          BL       __aeabi_memclr4
                  |L4.32|
;;;366        }
;;;367       
;;;368        if(system_flag_table == NULL)
000020  68a0              LDR      r0,[r4,#8]  ; system_flag_table
000022  b930              CBNZ     r0,|L4.50|
;;;369        {
;;;370            system_flag_table = v1000_memalloc(sizeof(system_flag));    
000024  2044              MOVS     r0,#0x44
000026  f7fffffe          BL       v1000_memalloc
;;;371            memset(system_flag_table,0,sizeof(system_flag));
00002a  2144              MOVS     r1,#0x44
00002c  60a0              STR      r0,[r4,#8]  ; system_flag_table
00002e  f7fffffe          BL       __aeabi_memclr4
                  |L4.50|
;;;372        }
;;;373        
;;;374        __enable_irq();
000032  b662              CPSIE    i
;;;375        delay_init(32);      //��ʱ��ʼ�//
000034  2020              MOVS     r0,#0x20
000036  f7fffffe          BL       delay_init
;;;376    
;;;377    
;;;378    #if EN_USART1
;;;379        uart_init(115200);
00003a  f44f30e1          MOV      r0,#0x1c200
00003e  f7fffffe          BL       uart_init
;;;380    #endif
;;;381        //for_test_gps_gpx();
;;;382    
;;;383        IIC_Init();
000042  f7fffffe          BL       IIC_Init
;;;384        OLED_Init();			//???OLED
000046  f7fffffe          BL       OLED_Init
;;;385        My_RTC_Init();
00004a  f7fffffe          BL       My_RTC_Init
;;;386        LED_Init();
00004e  f7fffffe          BL       LED_Init
;;;387        //OLED_ShowString12(16,28,"!!!!");
;;;388    
;;;389       // v1000_show_logo();
;;;390        KEY_Init();				//��ʼ����LED���ӵ�Ӳ���ӿ�
000052  f7fffffe          BL       KEY_Init
;;;391        SPI_Flash_Init();   //SPI FLASH ��ʼ��
000056  f7fffffe          BL       SPI_Flash_Init
;;;392        SPI_Flash_WAKEUP();
00005a  f7fffffe          BL       SPI_Flash_WAKEUP
;;;393        SPIx_SetSpeed(SPI_SPEED_2);
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       SPIx_SetSpeed
;;;394        delay_ms(50);
000064  2032              MOVS     r0,#0x32
000066  f7fffffe          BL       delay_ms
;;;395        SPI_Flash_WAKEUP();
00006a  f7fffffe          BL       SPI_Flash_WAKEUP
;;;396    
;;;397        v1000_debug("version :v-1.0.0 \r\n");
00006e  a022              ADR      r0,|L4.248|
000070  f7fffffe          BL       __2printf
;;;398        /* Open or create a log file and ready to append */
;;;399    
;;;400        mkdir_init(0);
000074  2000              MOVS     r0,#0
000076  f7fffffe          BL       mkdir_init
;;;401        read_poi_file();
00007a  f7fffffe          BL       read_poi_file
;;;402        //Del_oldfile_nospace();
;;;403        USART2_Init(32,38400);	//?????2
00007e  f44f4116          MOV      r1,#0x9600
000082  2020              MOVS     r0,#0x20
000084  f7fffffe          BL       USART2_Init
;;;404        Timerx_Init(99,3199);//10Khz  ??4999 --- 500ms
000088  f640417f          MOV      r1,#0xc7f
00008c  2063              MOVS     r0,#0x63
00008e  f7fffffe          BL       Timerx_Init
;;;405        check_eeprom_init();
000092  f7fffffe          BL       check_eeprom_init
;;;406        Send_to_goto_lowpower();
000096  f7fffffe          BL       Send_to_goto_lowpower
;;;407        bmp_moudle_preinit();
00009a  f7fffffe          BL       bmp_moudle_preinit
;;;408    //    PWM_Init();
;;;409        ADC_Config();
00009e  f7fffffe          BL       ADC_Config
;;;410        Button_key_perss(0);
0000a2  2000              MOVS     r0,#0
0000a4  f7fffffe          BL       Button_key_perss
;;;411    #ifndef NO_BMP085
;;;412        BMP085_get_process();
;;;413    #endif
;;;414        restore_pass();
0000a8  f7fffffe          BL       restore_pass
;;;415        OLED_Clear();
0000ac  f7fffffe          BL       OLED_Clear
;;;416        Set_System();
0000b0  f7fffffe          BL       Set_System
;;;417        Set_USBClock();
0000b4  f7fffffe          BL       Set_USBClock
;;;418        system_flag_table->charger_connected = 0;
0000b8  68a1              LDR      r1,[r4,#8]  ; system_flag_table
0000ba  2000              MOVS     r0,#0
0000bc  f881002d          STRB     r0,[r1,#0x2d]
;;;419    
;;;420    
;;;421        if(USB_CONNECT == 1)
0000c0  4812              LDR      r0,|L4.268|
0000c2  f8d00200          LDR      r0,[r0,#0x200]
0000c6  2801              CMP      r0,#1
0000c8  d103              BNE      |L4.210|
;;;422        {
;;;423            //system_flag_table->charger_connected = 1;
;;;424            USB_Interrupts_Config();
0000ca  f7fffffe          BL       USB_Interrupts_Config
;;;425            USB_Init();
0000ce  f7fffffe          BL       USB_Init
                  |L4.210|
;;;426        }
;;;427      //  else
;;;428            
;;;429        Choose_power_mode(MCU_RUN);
0000d2  2000              MOVS     r0,#0
0000d4  f7fffffe          BL       Choose_power_mode
;;;430        change_clk_need_int(0);	
0000d8  2000              MOVS     r0,#0
0000da  f7fffffe          BL       change_clk_need_int
;;;431        rtc_set_flag = 1;
0000de  490c              LDR      r1,|L4.272|
0000e0  2001              MOVS     r0,#1
0000e2  7008              STRB     r0,[r1,#0]
;;;432        is_update_to_poweron();
0000e4  f7fffffe          BL       is_update_to_poweron
                  |L4.232|
;;;433    //    test_angle();
;;;434        while(1)
;;;435        {
;;;436            Timer_task();
0000e8  f7fffffe          BL       Timer_task
;;;437            main_porcess();
0000ec  f7fffffe          BL       main_porcess
0000f0  e7fa              B        |L4.232|
;;;438        }
;;;439    
;;;440     }
;;;441    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L4.244|
                          DCD      ||area_number.15||
                  |L4.248|
0000f8  76657273          DCB      "version :v-1.0.0 \r\n",0
0000fc  696f6e20
000100  3a762d31
000104  2e302e30
000108  200d0a00
                  |L4.268|
                          DCD      0x42400000
                  |L4.272|
                          DCD      rtc_set_flag

                          AREA ||i.mkdir_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  mkdir_init PROC
;;;234    
;;;235    void mkdir_init(unsigned char mode)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
;;;237        static FATFS *fs = NULL;
;;;238        FRESULT fr;
;;;239    
;;;240        if(fs == NULL)
000002  4d17              LDR      r5,|L5.96|
000004  4606              MOV      r6,r0                 ;236
000006  6828              LDR      r0,[r5,#0]            ;236  ; fs
000008  b920              CBNZ     r0,|L5.20|
;;;241        {
;;;242            fs = v1000_memalloc(sizeof(FATFS));
00000a  f44f700c          MOV      r0,#0x230
00000e  f7fffffe          BL       v1000_memalloc
000012  6028              STR      r0,[r5,#0]  ; fs
                  |L5.20|
;;;243        }
;;;244        fr = f_mount(fs, "", 0);
000014  2200              MOVS     r2,#0
000016  a113              ADR      r1,|L5.100|
000018  f7fffffe          BL       f_mount
;;;245    
;;;246        fr = f_mkdir("POI");
00001c  a012              ADR      r0,|L5.104|
00001e  f7fffffe          BL       f_mkdir
000022  4604              MOV      r4,r0
;;;247        v1000_debug("\r\n mkdir_init %d \r\n",fr);
000024  4601              MOV      r1,r0
000026  a011              ADR      r0,|L5.108|
000028  f7fffffe          BL       __2printf
;;;248        
;;;249    
;;;250        if((fr == FR_EXIST)&&(mode == 0))
00002c  2c08              CMP      r4,#8
00002e  d101              BNE      |L5.52|
000030  2e00              CMP      r6,#0
000032  d013              BEQ      |L5.92|
                  |L5.52|
;;;251            return;
;;;252        else 
;;;253        {
;;;254            fr = f_mkfs("", 0, 0); 
000034  2200              MOVS     r2,#0
000036  4611              MOV      r1,r2
000038  a00a              ADR      r0,|L5.100|
00003a  f7fffffe          BL       f_mkfs
;;;255            fr = f_mount(fs, "", 0);
00003e  2200              MOVS     r2,#0
000040  a108              ADR      r1,|L5.100|
000042  6828              LDR      r0,[r5,#0]  ; fs
000044  f7fffffe          BL       f_mount
;;;256            fr = f_mkdir("POI");
000048  a007              ADR      r0,|L5.104|
00004a  f7fffffe          BL       f_mkdir
;;;257            if(fr != FR_OK)
00004e  2800              CMP      r0,#0
000050  d004              BEQ      |L5.92|
;;;258            {
;;;259                v1000_debug("\r\n mkfs faild");
000052  e8bd4070          POP      {r4-r6,lr}
000056  a00a              ADR      r0,|L5.128|
000058  f7ffbffe          B.W      __2printf
                  |L5.92|
;;;260            }
;;;261        }
;;;262    }
00005c  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      ||area_number.15||
                  |L5.100|
000064  00                DCB      0
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L5.104|
000068  504f4900          DCB      "POI",0
                  |L5.108|
00006c  0d0a206d          DCB      "\r\n mkdir_init %d \r\n",0
000070  6b646972
000074  5f696e69
000078  74202564
00007c  200d0a00
                  |L5.128|
000080  0d0a206d          DCB      "\r\n mkfs faild",0
000084  6b667320
000088  6661696c
00008c  6400    
00008e  00                DCB      0
00008f  00                DCB      0

                          AREA ||i.open_append||, CODE, READONLY, ALIGN=1

                  open_append PROC
;;;88     
;;;89     FRESULT open_append (
000000  b570              PUSH     {r4-r6,lr}
;;;90         FIL* fp,            /* [OUT] File object to create */
;;;91         const char* path    /* [IN]  File name to be opened */
;;;92     )
;;;93     {
000002  4605              MOV      r5,r0
;;;94         FRESULT fr;
;;;95         /* Opens an existing file. If not exist, creates a new file. */
;;;96         fr = f_open(fp, path,FA_READ|FA_WRITE|FA_OPEN_ALWAYS);
000004  2213              MOVS     r2,#0x13
000006  f7fffffe          BL       f_open
00000a  0004              MOVS     r4,r0
;;;97         //v1000_debug("open append ok :%d \r\n",fr);
;;;98         if (fr == FR_OK) {
00000c  d108              BNE      |L6.32|
;;;99             /* Seek to end of the file to append data */
;;;100            fr = f_lseek(fp, f_size(fp));
00000e  4628              MOV      r0,r5
000010  68e9              LDR      r1,[r5,#0xc]
000012  f7fffffe          BL       f_lseek
000016  0004              MOVS     r4,r0
;;;101            //v1000_debug("f_lseek :%d \r\n",fr);
;;;102            if (fr != FR_OK)
000018  d002              BEQ      |L6.32|
;;;103                f_close(fp);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       f_close
                  |L6.32|
;;;104        }
;;;105        return fr;
000020  4620              MOV      r0,r4
;;;106    }
000022  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.scan_directory_oldfile||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  scan_directory_oldfile PROC
;;;109    
;;;110    FRESULT scan_directory_oldfile (
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;111        char* path,      /* Working buffer filled with start directory */
;;;112        char* old_path,      /* Working buffer filled with start directory */
;;;113        unsigned long* date_time,
;;;114        char mode,
;;;115        int *filenumer
;;;116    
;;;117    )
;;;118    {
000004  b08f              SUB      sp,sp,#0x3c
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
;;;119        UINT i, j;
;;;120        FRESULT fr;
;;;121        DIR dir;
;;;122        FILINFO fno;
;;;123    #if _USE_LFN
;;;124        fno.lfname = 0; /* Disable LFN output */
;;;125    #endif
;;;126        fr = f_opendir(&dir, path);
00000a  4601              MOV      r1,r0
00000c  469a              MOV      r10,r3                ;118
00000e  4693              MOV      r11,r2                ;118
000010  a807              ADD      r0,sp,#0x1c
000012  f8dd9060          LDR      r9,[sp,#0x60]
000016  f7fffffe          BL       f_opendir
00001a  0005              MOVS     r5,r0
;;;127        if (fr == FR_OK) 
00001c  d14f              BNE      |L7.190|
;;;128        {
;;;129            for (i = 0; path[i]; i++) ;
00001e  2600              MOVS     r6,#0
000020  e000              B        |L7.36|
                  |L7.34|
000022  1c76              ADDS     r6,r6,#1
                  |L7.36|
000024  5da0              LDRB     r0,[r4,r6]
000026  2800              CMP      r0,#0
000028  d1fb              BNE      |L7.34|
;;;130            path[i++] = '/';
00002a  202f              MOVS     r0,#0x2f
00002c  55a0              STRB     r0,[r4,r6]
00002e  f10d080d          ADD      r8,sp,#0xd            ;122
000032  1c76              ADDS     r6,r6,#1              ;122
                  |L7.52|
;;;131            for (;;) 
;;;132            {
;;;133                fr = f_readdir(&dir, &fno);
000034  a901              ADD      r1,sp,#4
000036  a807              ADD      r0,sp,#0x1c
000038  f7fffffe          BL       f_readdir
00003c  0005              MOVS     r5,r0
;;;134                if (fr != FR_OK || !fno.fname[0]) break;
00003e  d138              BNE      |L7.178|
000040  f89d000d          LDRB     r0,[sp,#0xd]
000044  b3a8              CBZ      r0,|L7.178|
;;;135                if (_FS_RPATH && fno.fname[0] == '.') continue;
;;;136                j = 0;
000046  2000              MOVS     r0,#0
000048  aa01              ADD      r2,sp,#4              ;122
                  |L7.74|
;;;137                do
;;;138                    path[i+j] = fno.fname[j];
00004a  1811              ADDS     r1,r2,r0
00004c  1835              ADDS     r5,r6,r0
00004e  7a4b              LDRB     r3,[r1,#9]
000050  5563              STRB     r3,[r4,r5]
;;;139                while (fno.fname[j++]);
000052  7a49              LDRB     r1,[r1,#9]
000054  1c40              ADDS     r0,r0,#1
000056  2900              CMP      r1,#0
000058  d1f7              BNE      |L7.74|
;;;140                if (fno.fattrib & AM_DIR) 
00005a  f89d000c          LDRB     r0,[sp,#0xc]
00005e  06c0              LSLS     r0,r0,#27
000060  d531              BPL      |L7.198|
000062  4641              MOV      r1,r8
;;;141                {   
;;;142                    v1000_debug("fno.name :%s\r\n",fno.fname);
000064  a030              ADR      r0,|L7.296|
000066  f7fffffe          BL       __2printf
;;;143                    
;;;144                    if((strcmp(fno.fname,"POI") != 0)&&(strcmp(fno.fname,"SYSTEM~1") != 0))
00006a  a133              ADR      r1,|L7.312|
00006c  4640              MOV      r0,r8
00006e  f7fffffe          BL       strcmp
000072  2800              CMP      r0,#0
000074  d0de              BEQ      |L7.52|
000076  a131              ADR      r1,|L7.316|
000078  4640              MOV      r0,r8
00007a  f7fffffe          BL       strcmp
00007e  2800              CMP      r0,#0
000080  d0d8              BEQ      |L7.52|
;;;145                    {            
;;;146                        fr = scan_directory_oldfile(path,old_path,date_time,mode,filenumer);
000082  4653              MOV      r3,r10
000084  465a              MOV      r2,r11
000086  4639              MOV      r1,r7
000088  4620              MOV      r0,r4
00008a  f8cd9000          STR      r9,[sp,#0]
00008e  f7fffffe          BL       scan_directory_oldfile
000092  0005              MOVS     r5,r0
;;;147                        if (fr != FR_OK) break;
000094  d10d              BNE      |L7.178|
;;;148                    
;;;149                    
;;;150                        if(mode == 1)
000096  f1ba0f01          CMP      r10,#1
00009a  d1cb              BNE      |L7.52|
                  |L7.156|
;;;151                        {
;;;152                            j = 0;
;;;153                            do
;;;154                               old_path[j] = path[j];
00009c  5c21              LDRB     r1,[r4,r0]
00009e  5439              STRB     r1,[r7,r0]
;;;155                            while (path[j++]);
0000a0  5c21              LDRB     r1,[r4,r0]
0000a2  1c40              ADDS     r0,r0,#1
0000a4  2900              CMP      r1,#0
0000a6  d1f9              BNE      |L7.156|
                  |L7.168|
;;;156                            fr = f_unlink(path);
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       f_unlink
0000ae  0005              MOVS     r5,r0
;;;157                            if (fr != FR_OK) break;                      
0000b0  d0c0              BEQ      |L7.52|
                  |L7.178|
;;;158                        }
;;;159                                   
;;;160                    }
;;;161    
;;;162                }
;;;163                else
;;;164                {
;;;165                    *filenumer +=1;
;;;166                    if((*date_time > ((fno.fdate <<16 )|fno.ftime))&&(mode == 0))
;;;167                    {
;;;168                        *date_time = ((fno.fdate <<16 )|fno.ftime);
;;;169                        j = 0;
;;;170                        do
;;;171                            old_path[j] = path[j];
;;;172                        while (path[j++]);
;;;173                       
;;;174                        v1000_debug("name :%s, data :%x, timer:%x  j:%d\r\n",path,fno.fdate,fno.ftime,*filenumer);
;;;175                    }
;;;176                    
;;;177                    if(mode == 1)
;;;178                    {
;;;179                        j = 0;
;;;180                        do
;;;181                            old_path[j] = path[j];
;;;182                         while (path[j++]);
;;;183                        fr = f_unlink(path);
;;;184                        if (fr != FR_OK) break;     
;;;185                         
;;;186                    }                
;;;187                    
;;;188                }
;;;189    
;;;190            }
;;;191            path[--i] = '\0';
0000b2  1e76              SUBS     r6,r6,#1
0000b4  2000              MOVS     r0,#0
0000b6  55a0              STRB     r0,[r4,r6]
;;;192            f_closedir(&dir);
0000b8  a807              ADD      r0,sp,#0x1c
0000ba  f7fffffe          BL       f_closedir
                  |L7.190|
;;;193        }
;;;194        
;;;195    
;;;196        return fr;
;;;197    }
0000be  b00f              ADD      sp,sp,#0x3c
0000c0  4628              MOV      r0,r5                 ;196
0000c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.198|
0000c6  f8d90000          LDR      r0,[r9,#0]            ;165
0000ca  1c40              ADDS     r0,r0,#1              ;165
0000cc  f8c90000          STR      r0,[r9,#0]            ;166
0000d0  f8db0000          LDR      r0,[r11,#0]           ;166
0000d4  9902              LDR      r1,[sp,#8]            ;166
0000d6  ebb04f31          CMP      r0,r1,ROR #16         ;166
0000da  d902              BLS      |L7.226|
0000dc  f1ba0f00          CMP      r10,#0                ;166
0000e0  d00a              BEQ      |L7.248|
                  |L7.226|
0000e2  f1ba0f01          CMP      r10,#1                ;177
0000e6  d1a5              BNE      |L7.52|
0000e8  2000              MOVS     r0,#0                 ;179
                  |L7.234|
0000ea  5c21              LDRB     r1,[r4,r0]            ;181
0000ec  5439              STRB     r1,[r7,r0]            ;181
0000ee  5c21              LDRB     r1,[r4,r0]            ;182
0000f0  1c40              ADDS     r0,r0,#1              ;182
0000f2  2900              CMP      r1,#0                 ;182
0000f4  d1f9              BNE      |L7.234|
0000f6  e7d7              B        |L7.168|
                  |L7.248|
0000f8  ea4f4131          ROR      r1,r1,#16             ;168
0000fc  2000              MOVS     r0,#0                 ;169
0000fe  f8cb1000          STR      r1,[r11,#0]           ;169
                  |L7.258|
000102  5c21              LDRB     r1,[r4,r0]            ;171
000104  5439              STRB     r1,[r7,r0]            ;171
000106  5c21              LDRB     r1,[r4,r0]            ;172
000108  1c40              ADDS     r0,r0,#1              ;172
00010a  2900              CMP      r1,#0                 ;172
00010c  d1f9              BNE      |L7.258|
00010e  f8d90000          LDR      r0,[r9,#0]            ;174
000112  9000              STR      r0,[sp,#0]            ;174
000114  f8bd300a          LDRH     r3,[sp,#0xa]          ;174
000118  f8bd2008          LDRH     r2,[sp,#8]            ;174
00011c  4621              MOV      r1,r4                 ;174
00011e  a00a              ADR      r0,|L7.328|
000120  f7fffffe          BL       __2printf
000124  e786              B        |L7.52|
;;;198    
                          ENDP

000126  0000              DCW      0x0000
                  |L7.296|
000128  666e6f2e          DCB      "fno.name :%s\r\n",0
00012c  6e616d65
000130  203a2573
000134  0d0a00  
000137  00                DCB      0
                  |L7.312|
000138  504f4900          DCB      "POI",0
                  |L7.316|
00013c  53595354          DCB      "SYSTEM~1",0
000140  454d7e31
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L7.328|
000148  6e616d65          DCB      "name :%s, data :%x, timer:%x  j:%d\r\n",0
00014c  203a2573
000150  2c206461
000154  7461203a
000158  25782c20
00015c  74696d65
000160  723a2578
000164  20206a3a
000168  25640d0a
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0

                          AREA ||i.v1000_memalloc||, CODE, READONLY, ALIGN=1

                  v1000_memalloc PROC
;;;227    
;;;228    void* v1000_memalloc (	/* Returns pointer to the allocated memory block */
000000  f7ffbffe          B.W      malloc
;;;229    	UINT msize		/* Number of bytes to allocate */
;;;230    )
;;;231    {
;;;232    	return malloc(msize);	/* Allocate a new memory block with POSIX API */
;;;233    }
;;;234    
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  31363a34          DCB      "16:42:16",0
000004  323a3136
000008  00      

                          AREA ||area_number.12||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.conststring||
000000  4d617920          DCB      "May 11 2020",0
000004  31312032
000008  30323000

                          AREA ||.data||, DATA, ALIGN=2

                  COMPILED_TIME
                          DCD      ||.conststring||

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  COMPILED_DATE
                          DCD      ||area_number.12||

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  ||fs||
                          DCD      0x00000000
                  gpsx
                          DCD      0x00000000
                  system_flag_table
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a5f3c36b____REV16|
#line 114 "..\\..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_a5f3c36b____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_a5f3c36b____REVSH|
#line 128
|__asm___6_main_c_a5f3c36b____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
